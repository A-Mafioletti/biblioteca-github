
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware para analisar JSON no corpo das requisições
app.use(express.json()); 

// --- Dados Mock (simulando um banco de dados temporário para manutenções) ---
let manutencoes = [
    { id: 1, equipamento: 'Máquina de Café', descricao: 'Limpeza e descalcificação', dataPrevista: '2025-07-10', status: 'Pendente' },
    { id: 2, equipamento: 'Servidor Web', descricao: 'Atualização de segurança', dataPrevista: '2025-07-05', status: 'Em Andamento' },
    { id: 3, equipamento: 'Ar Condicionado Sala 3', descricao: 'Verificação de gás refrigerante', dataPrevista: '2025-07-20', status: 'Pendente' }
];
let nextId = 4; // Para gerar IDs únicos para novas manutenções

// --- Rotas da API de Manutenção ---

// Rota 1: GET /manutencoes - Retorna todas as manutenções
app.get('/manutencoes', (req, res) => {
    res.json(manutencoes);
});

// Rota 2: GET /manutencoes/:id - Retorna uma manutenção específica pelo ID
app.get('/manutencoes/:id', (req, res) => {
    const id = parseInt(req.params.id);
    const manutencao = manutencoes.find(m => m.id === id);

    if (manutencao) {
        res.json(manutencao);
    } else {
        res.status(404).json({ message: 'Manutenção não encontrada.' });
    }
});

// Rota 3: POST /manutencoes - Cria uma nova manutenção
app.post('/manutencoes', (req, res) => {
    const { equipamento, descricao, dataPrevista, status } = req.body;

    // Validação básica: verifica campos obrigatórios
    if (!equipamento || !descricao || !dataPrevista || !status) {
        return res.status(400).json({ message: 'Todos os campos (equipamento, descricao, dataPrevista, status) são obrigatórios.' });
    }

    const novaManutencao = {
        id: nextId++,
        equipamento,
        descricao,
        dataPrevista,
        status
    };

    manutencoes.push(novaManutencao);
    res.status(201).json(novaManutencao); // 201 Created
});

// Rota 4: PUT /manutencoes/:id - Atualiza uma manutenção existente
app.put('/manutencoes/:id', (req, res) => {
    const id = parseInt(req.params.id);
    const manutencaoIndex = manutencoes.findIndex(m => m.id === id);

    if (manutencaoIndex > -1) {
        // Atualiza apenas os campos fornecidos, mantendo os existentes
        manutencoes[manutencaoIndex] = {
            ...manutencoes[manutencaoIndex], // Mantém os dados existentes
            ...req.body // Sobrescreve com os dados do corpo da requisição
        };
        res.json(manutencoes[manutencaoIndex]);
    } else {
        res.status(404).json({ message: 'Manutenção não encontrada para atualização.' });
    }
});

// Rota 5: DELETE /manutencoes/:id - Deleta uma manutenção existente
app.delete('/manutencoes/:id', (req, res) => {
    const id = parseInt(req.params.id);
    const initialLength = manutencoes.length;

    manutencoes = manutencoes.filter(m => m.id !== id);

    if (manutencoes.length < initialLength) {
        res.status(204).send(); // 204 No Content
    } else {
        res.status(404).json({ message: 'Manutenção não encontrada para exclusão.' });
    }
});

// --- Iniciar o Servidor ---
app.listen(PORT, () => {
    console.log(`Servidor de Manutenção rodando em http://localhost:${PORT}`);
    console.log('Use CTRL+C para parar o servidor.');
});